import * as THREE from "three";
import {OrbitControls} from 'three/examples/jsm/controls/OrbitControls.js';
import * as dat from 'dat.gui';

import background from '/src/background.jpg'; // Credit: <a href="https://www.freepik.com/free-photo/abstract-flowing-neon-wave-background_15474089.htm#query=background&position=26&from_view=keyword">Image by rawpixel.com</a> on Freepik
import stars from '/src/stars.jpg'; //https://www.pxfuel.com/en/free-photo-obmtg/download
import one from '../img/one.jpg';
import two from '../img/two.jpg';
import thre from '../img/three.jpg';
import four from '../img/four.jpg';
import five from '../img/five.jpg';
import six from '../img/six.jpg';

var height = window.innerHeight;
var width = window.innerWidth;

const renderer = new THREE.WebGLRenderer();
renderer.setSize(width, height);
//renderer.setClearColor(0x334455);

const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(45, width/height, 0.1, 1000);
const orbit = new OrbitControls(camera, renderer.domElement);

//#region background
    const textureLoader = new THREE.TextureLoader();    
    //scene.background = textureLoader.load(stars);         //This one is just a static background
        //Sets the background of the project
    const cubeLoader = new THREE.CubeTextureLoader();

    //We build out the cube walls with these images, builds a 'reactive space'
    scene.background = cubeLoader.load([background,background,stars,stars,stars,stars]);
//#endregion

renderer.shadowMap.enabled = true;
document.body.appendChild(renderer.domElement);





const axesHelper = new THREE.AxesHelper(3);
scene.add(axesHelper);

const gridHelper = new THREE.GridHelper(30);
scene.add(gridHelper);



//Light--------------------//
const ambientLight = new THREE.AmbientLight(0x222222);
scene.add(ambientLight);

//EITHER SPOTLIGHT OR DIRECTIONAL. NOT BOTH
//Directional = Sun
//Spotlight = Flashlight/Spotlight

//#region Directional Light
/*
const directionalLight = new THREE.DirectionalLight(0x334455, 26);
scene.add(directionalLight);

const directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight);
scene.add(directionalLightHelper);

//Helps ONLY for shadows; Uses shadow camera
const lightCameraHelper = new THREE.CameraHelper(directionalLight.shadow.camera);
scene.add(lightCameraHelper);
directionalLight.shadow.camera.top = 40;
directionalLight.shadow.camera.right = 40;
directionalLight.shadow.camera.left = -40;
directionalLight.shadow.camera.bottom = -40;

directionalLight.position.set(-20,10,0);
directionalLight.castShadow = true;

*/
//#endregion

//#region Spotlight

//Fog
scene.fog = new THREE.Fog(0xFFFFFF,0,200);
//scene.fog = new THREE.FogExp2(0xFFFFFF, .01); Exponential fog, fogs up faster


const spotLight = new THREE.SpotLight(0xFFFFFF);
spotLight.castShadow = true;
spotLight.decay = 0;
spotLight.position.set(-20,20,0);

const spotLightHelper = new THREE.SpotLightHelper(spotLight);
scene.add(spotLightHelper);
scene.add(spotLight);
//#endregion


camera.position.set(-10,30,30);
orbit.update();


const mousePos = new THREE.Vector2();

window.addEventListener('mousemove', function(e){
    mousePos.x = (e.clientX / width) * 2-1;
    mousePos.y = (e.clientY / height) * 2+1;
})
const rayCaster = new THREE.Raycaster();



//Shapes--------------------------------//
    //Box---------------------------//
const boxGeo = new THREE.BoxGeometry();
const boxMat = new THREE.MeshBasicMaterial({color: 0x44FF11, side: THREE.DoubleSide});
const box = new THREE.Mesh(boxGeo, boxMat);
//scene.add(box);

    //Box2, uses a texture for the mesh
    const boxCoolGeo = new THREE.BoxGeometry(4,4,4);
    //const boxCoolMat = new THREE.MeshBasicMaterial({color: 0xFF0000, map: textureLoader.load(stars)});
    //const boxCool = new THREE.Mesh(boxCoolGeo, boxCoolMat);

    const boxCoolMaterials = 
    [
        new THREE.MeshBasicMaterial({map:textureLoader.load(one)}),
        new THREE.MeshBasicMaterial({map:textureLoader.load(two)}),
        new THREE.MeshBasicMaterial({map:textureLoader.load(thre)}),
        new THREE.MeshBasicMaterial({map:textureLoader.load(four)}),
        new THREE.MeshBasicMaterial({map:textureLoader.load(five)}),
        new THREE.MeshBasicMaterial({map:textureLoader.load(six)})
    ];

    const boxCool = new THREE.Mesh(boxCoolGeo, boxCoolMaterials);

    boxCool.position.y = 10;
    boxCool.castShadow = true;
    //boxCool.material.map = textureLoader.load(stars); This is another way to apply texture
    scene.add(boxCool);

    //Plane-------------//
const planeGeo = new THREE.PlaneGeometry(30,30);
const planeMat = new THREE.MeshStandardMaterial({color: 0xFFFFFF, side: THREE.DoubleSide});
const plane = new THREE.Mesh(planeGeo, planeMat);
plane.receiveShadow = true;
scene.add(plane);
plane.rotation.x = -.5  * Math.PI;

    //Sphere-------------------------//
const sphereGeo = new THREE.SphereGeometry(4, 36, 36);
const sphereMat = new THREE.MeshStandardMaterial({color: 0xFF4400, wireframe: false});
const sphere = new THREE.Mesh(sphereGeo, sphereMat);
sphere.castShadow = true;
scene.add(sphere);
sphere.position.set(-10,10,10);


const coneGeo = new THREE.ConeGeometry(3,5,25);
const coneMat = new THREE.MeshStandardMaterial({color: 0x22FF88, side: THREE.DoubleSide});
const cone = new THREE.Mesh(coneGeo, coneMat);
cone.castShadow = true;
scene.add(cone);
cone.position.set(5,5,-5);

const torusGeo = new THREE.TorusGeometry(2, 1, 14, 24);
const torusMat = new THREE.MeshStandardMaterial({color: 0xFF0000, side: THREE.DoubleSide});
const torus = new THREE.Mesh(torusGeo, torusMat);
torus.castShadow = true;
scene.add(torus);
torus.position.set(1,5,0);
torus.rotateY(4.8);

//Week 7 updates to implement

//Make an assets folfer in src and import a blender model there.
//then at top, 
    import {GLTFLoader} from 'three/examples/jsm/loader/GLTFLoader.js' 
    const deerUrl = new URL('../assets/deer.glb');
const assetLoader = new GLTFLoader();
assetLoader.load(
    deerUrl.href,
    function(gltf){
        const model = gltf.scene;
        scene.add(model);
        model.position.set(-12,34,10);
    },
    undefined,
    function(error){
        console.error(error);
    }
);



//#region Bad Shader Implementation
const vShader = `
    void main()
    {
        gl_Position = projectionMatrix * modelViewMatrix * vec4(position, 1.0);
    }`
;

const fShader = `
    void main()
    {
        gl_FragColor = vec4(0.5,0.5,1.0,1.0);
    }`
;
//#endregion

/* const sphereMat2 = new THREE.ShaderMaterial({
    vertexShader: vShader,                          This is the BAD way of making shaders, with strings.
    fragmentShader: fShader,
}); */

const sphereMat2 = new THREE.ShaderMaterial({       //The better way of creating shaders, in Index
    vertexShader: document.getElementById('vertexShader').textContent,
    fragmentShader: document.getElementById('fragmentShader').textContent,
});

const sphereGeo2 = new THREE.SphereGeometry(5,40,40);
const sphere2 = new THREE.Mesh(sphereGeo2, sphereMat2);
sphere2.position.set(5, 10, 10);

const plan2eGeo = new THREE.PlaneGeometry(10,10,10,10);
const plane2Mat = new THREE.MeshBasicMaterial({color: 0xFFFFFF, side: THREE.DoubleSide});
const plane2 = new THREE.Mesh(plane2Geo, plane2Mat);
scene.add(plane2);




//Modify Vertex
plane2.geometry.attributes.position.array[0] = 5*Math.random();
plane2.geometry.attributes.position.array[1] = 5*Math.random();
plane2.geometry.attributes.position.array[2] = 5*Math.random();

/*  Put this in the animate function to see what happens
plane2.geometry.attributes.position.array[0] = 5*Math.random();
plane2.geometry.attributes.position.array[1] = 5*Math.random();
plane2.geometry.attributes.position.array[2] = 5*Math.random();
*/
plane2.geometry.attributes.position.needsUpdate = true;

//Modifies the last vertex's Z position.
const lastZPos = plane2.geometry.attributes.array.length-1;
plane2.geometry.attributes.position.array[lastZPos] += 10 * Math.random();


const sunGeo = new THREE.SphereGeometry(4,36,36);
const sunMat = new THREE.MeshStandardMaterial({color: 0xFF0000, side: THREE.DoubleSide});
const sun = new THREE.Mesh(sunGeo, sunMat);
scene.add(sun);
sun.position.set(0,0,0);

const mercuryGeo = new THREE.SphereGeometry(3,36,36);
const mercuryMat = new THREE.MeshStandardMaterial({color: 0xFF3300, side: THREE.DoubleSide});
const mercury = new THREE.Mesh(mercuryGeo, mercuryMat);
//scene.add(mercury);
const mercuryOBJ = new THREE.Object3D();
mercuryOBJ.add(mercury);
scene.add(mercury);

const venusGeo = new THREE.SphereGeometry(3.4, 36, 36);
const venusMat = new THREE.MeshStandardMaterial({color: 0x554400, side: THREE.DoubleSide});
const venus = new THREE.Mesh(venusGeo, venusMat);
const venusOBJ = new THREE.Object3D();
venusOBJ.add(venus);
scene.add(venus);

const earthGeo = new THREE.SphereGeometry(4, 20, 20);
const earthMat = new THREE.MeshStandardMaterial({color: 0x114400, side: THREE.DoubleSide});
const earth = new THREE.Mesh(earthGeo, earthMat);
const earthOBJ = new THREE.Object3D();
earthOBJ.add(earth);
scene.add(earth);

const marsGeo = new THREE.SphereGeometry(3.7, 20, 20);
const marsMat = new THREE.MeshStandardMaterial({color: 0xFF1100, side: THREE.DoubleSide});
const mars = new THREE.Mesh(marsGeo, marsMat);
const marsOBJ = new THREE.Object3D();
marsOBJ.add(mars);
scene.add(mars);

const jupiterGeo = new THREE.SphereGeometry(6, 20, 20);
const jupiterMat = new THREE.MeshStandardMaterial({color: 0x337700, side: THREE.DoubleSide});
const jupiter = new THREE.Mesh(jupiterGeo, jupiterMat);
const jupiterOBJ = new THREE.Object3D();
jupiterOBJ.add(jupiter);
scene.add(jupiter);

const saturnGeo = new THREE.SphereGeometry(5.5, 20, 20);
const saturnMat = new THREE.MeshStandardMaterial({color: 0xFF3300, side: THREE.DoubleSide});
const saturn = new THREE.Mesh(saturnGeo, saturnMat);
const saturnOBJ = new THREE.Object3D();
saturnOBJ.add(saturn);
scene.add(saturn);

const uranasGeo = new THREE.SphereGeometry(5, 20,20);
const uranasMat = new THREE.MeshStandardMaterial({color: 0xFF3300, side: THREE.DoubleSide});
const uranas = new THREE.Mesh(uranasGeo, uranasMat);
const uranasOBJ = new THREE.Object3D();
uranasOBJ.add(uranas);
scene.add(uranas);

const neptuneGeo = new THREE.SphereGeometry(4.5, 20, 20);
const neptuneMat = new THREE.MeshStandardMaterial({color: 0x116600, side: THREE.DoubleSide});
const neptune = new THREE.Mesh(neptuneGeo, neptuneMat);
const neptuneOBJ = new THREE.Object3D();
neptuneOBJ.add(neptune);
scene.add(neptune);

const plutoGeo = new THREE.SphereGeometry(1, 15, 15);
const plutoMat = new THREE.MeshStandardMaterial({color: 0x223333, side: THREE.DoubleSide});
const pluto = new THREE.Mesh(plutoGeo, plutoMat);
const plutoOBJ = new THREE.Object3D();
plutoOBJ.add(pluto);
scene.add(pluto);

//For rotating around Sun, in ANimation funciton. MercuryOBJ is essentially the holder for Mercury

    mercury.position.set(sun.position.x+10, sun.position.y, sun.position.z);
    venus.position.set(sun.position.x+15, sun.position.y, sun.position.z);
    earth.position.set(sun.position.x+20, sun.position.y, sun.position.z);
    mars.position.set(sun.position.x+25, sun.position.y, sun.position.z);
    jupiter.position.set(sun.position.x+30, sun.position.y, sun.position.z);
    saturn.position.set(sun.position.x+35, sun.position.y, sun.position.z);
    uranas.position.set(sun.position.x+40, sun.position.y, sun.position.z);
    neptune.position.set(sun.position.x+45, sun.position.y, sun.position.z);
    pluto.position.set(sun.position.x+50, sun.position.y, sun.position.z);

    sun.rotateY(.01);

    mercuryOBJ.rotateY(.04);
    mercury.rotateY(.03);
    
    earthOBJ.rotateY(.01);
    earth.rotateY(.04);

    marsOBJ.rotateY(0.1);
    mars.rotateY(0.03);

    jupiterOBJ.rotateY(0.1);
    jupiter.rotateY(0.03);

    saturnOBJ.rotateY(0.1);
    saturn.rotateY(0.03);

    jupiterOBJ.rotateY(0.1);
    jupiter.rotateY(0.03);

    uranasOBJ.rotateY(0.1);
    uranas.rotateY(0.03);

    neptuneOBJ.rotateY(0.1);
    neptune.rotateY(0.03);

    plutoOBJ.rotateY(0.1);
    pluto.rotateY(0.03);

//At bottom of page...
window.addEventListener('resize', function(){
    width = this.window.innerWidth;
    height = this.window.innerHeight;
})

//End of Week7

const gui = new dat.GUI();
const guiOptions = {
    SphereColor: '#00FF00',
    wireFrame: true,
    Speed: .02,
    angle: .02,

    BigConeColor: '#00FF00',
    wireFrame: true,
    Conespeed: .02,
    Coneangle: .02,

    TorusColor: '#00FF00',
    wireFrame: true,
    TorusScale: 1,
    TorusSpeed: 1000,

    angle: 0.2,
    penumbra: 0,
    intensity: 1    
};
gui.addColor(guiOptions, 'SphereColor').onChange(function(e) {sphere.material.color.set(e);});
gui.add(guiOptions, 'wireFrame').onChange(function(e) {sphere.material.wireframe = e;});
gui.add(guiOptions, 'angle', 0,1);
gui.add(guiOptions, 'Speed', 0,1);


gui.addColor(guiOptions, 'BigConeColor').onChange(function(e) {cone.material.color.set(e);});
gui.add(guiOptions, 'wireFrame').onChange(function(e) {cone.material.wireframe = e;});
gui.add(guiOptions, 'Coneangle', -1,1);
gui.add(guiOptions, 'Conespeed', 0,1);


gui.addColor(guiOptions, 'TorusColor').onChange(function(e) {torus.material.color.set(e);});
gui.add(guiOptions, 'wireFrame').onChange(function(e) {torus.material.wireframe = e;});
gui.add(guiOptions, 'TorusScale', 1, 5);
gui.add(guiOptions, 'TorusSpeed', 10,1000);

//------------------//
gui.add(guiOptions, "angle", 0,1);
gui.add(guiOptions, "penumbra", 0,1);
gui.add(guiOptions, "intensity", 0,1);


var speed = .01;

var coneSpeed =1;
var coneAngle =1.5;

var torSpeed =1000;
var torScale = 1;
 
function animate(time) {
    //box.rotation.x = time/1000;
    //box.rotation.y = time/1000;

    speed += guiOptions.Speed;
    sphere.position.y = 10 * Math.abs(Math.sin(speed));

    coneSpeed += guiOptions.Conespeed;
    coneAngle += guiOptions.Coneangle;
    cone.position.x = (coneAngle *0.1) * (Math.sin(coneSpeed));
    cone.position.y = (coneAngle *0.1) * (Math.cos(coneSpeed));

    torSpeed = guiOptions.TorusSpeed;
    torus.rotation.y = time/torSpeed;
    torus.rotation.x = time/200;
    
    torScale = guiOptions.TorusScale;
    torus.scale.set(torScale, torScale, 3);

    spotLight.angle = guiOptions.angle;    
    spotLight.penumbra = guiOptions.penumbra;
    spotLight.intensity = guiOptions.intensity;
    
    rayCaster.setFromCamera(mousePos, camera);
    const intersectObj = rayCaster.intersectObjects(scene.children);
    console.log(intersectObj);

    for (let index = 0; index < intersectObj.length; index++)
    {
        if (intersectObj[i].object.id === sphere.id)
        {
            intersectObj[i].object.material.color.set(0xFF0000);    
        }

        if (intersectObj[i].object.id === boxCool.id)
        {
            intersectObj[i].object.material.color.set(0x00FF00); //Or you can have it rotate when mouse over
        }
        
    }

    sun.rotateY(.01);
    mercuryOBJ.rotateY();

    spotLightHelper.update();
    renderer.render(scene, camera);
}

//renderer.render(scene, camera);
renderer.setAnimationLoop(animate);
